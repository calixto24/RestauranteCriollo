create table person (
	id_person SERIAL not null PRIMARY KEY,
	address varchar(100),
	phone_number int,
	email varchar(100) 
);

create table naturalPerson (
	id_naturalPerson SERIAL not null PRIMARY KEY,
	dni int,
	name varchar(100),
	last_paternal varchar(100),
	last_maternal varchar(100),
	birthdate Date,
	id_person int not null,

	CONSTRAINT fk_person_naturalPerson FOREIGN KEY (id_person) REFERENCES person(id_person) ON DELETE CASCADE
);

create table juridicalPerson (
	id_juridicalPerson SERIAL not null PRIMARY KEY,
	ruc varchar(11),
	socialReason varchar(100),
	type varchar(100),
	economicActivity varchar(100),
	typeBilling varchar(100),
	id_person int not null,

	CONSTRAINT fk_person FOREIGN KEY (id_person) REFERENCES person(id_person) ON DELETE CASCADE
);

create table juridicalCustomer(
	id_juridicalCustomer SERIAL not null PRIMARY KEY,
	register Date,
	id_juridicalPerson int not null,
	
	CONSTRAINT fk_juridicalPerson FOREIGN KEY (id_juridicalPerson) REFERENCES juridicalPerson(id_juridicalPerson) ON DELETE CASCADE
);

create table "role" (
	id_role SERIAL not null PRIMARY KEY,
	name_role varchar(100)
);

create table employee (
	id_employee SERIAL not null PRIMARY KEY,
	username varchar(100),
	password varchar(100),
	id_naturalPerson int not null,
	id_role int not null,

	CONSTRAINT fk_naturalPerson FOREIGN KEY (id_naturalPerson) REFERENCES naturalPerson(id_naturalPerson) ON DELETE CASCADE,
	CONSTRAINT fk_role FOREIGN KEY (id_role) REFERENCES role(id_role)
);

create table naturalCustomer (
	id_naturalCustomer SERIAL not null PRIMARY KEY,
	register Date,
	id_naturalPerson int not null,
	
	CONSTRAINT fk_naturalPerson FOREIGN KEY (id_naturalPerson) REFERENCES naturalPerson(id_naturalPerson) ON DELETE CASCADE
);

create table "table" (
	id_table SERIAL not null PRIMARY KEY,
	numger_table int,
	capacity int,
	status varchar(100),
	id_employee int not null,

	CONSTRAINT fk_employee FOREIGN KEY (id_employee) REFERENCES employee(id_employee)
);

create table category (
	id_category SERIAL not null PRIMARY KEY,
	name_category varchar(100),
	description varchar (100)
);

create table itemMenu (
	id_itemMenu SERIAL not null PRIMARY KEY,
	name_itemMenu varchar(100),
	priceUnit decimal(10,2),
	description varchar(100),
	status varchar(100),
	image varchar(100),
	id_category int not null,

	CONSTRAINT fk_category FOREIGN KEY (id_category) REFERENCES category(id_category)	
);

create table itemOrder (
	id_itemOrder SERIAL not null PRIMARY KEY,
	amount int,
	total decimal(10,2),
	description varchar(100),
	id_itemMenu int not null,

	CONSTRAINT fk_itemMenu FOREIGN KEY (id_itemMenu) REFERENCES itemMenu(id_itemMenu)	
);

create table "order" (
	id_order SERIAL not null PRIMARY KEY,
	"date" Date,
	"time" Time,
	status varchar(100),
	totalPrice decimal(10,2),
	id_employee int not null,
	id_table int not null,
	id_itemOrder int not null,

	CONSTRAINT fk_employee FOREIGN KEY (id_employee) REFERENCES employee(id_employee),
	CONSTRAINT fk_itemOrder FOREIGN KEY (id_itemOrder) REFERENCES itemOrder(id_itemOrder),
	CONSTRAINT fk_table FOREIGN KEY (id_table) REFERENCES "table"(id_table)
);

create table voucher (
	id_voucher SERIAL not null PRIMARY KEY,
	"date" Date,
	"time" Time,
	status varchar(100),
	totalPrice decimal(10,2),
	discount decimal(10,2),
	additionalPayments decimal(10,2),
	igv decimal(10,2),
	paymentType varchar(100),
	turned decimal(10,2),
	id_employee int not null,
	id_order int not null,

	CONSTRAINT fk_employee FOREIGN KEY (id_employee) REFERENCES employee(id_employee),
	CONSTRAINT fk_order FOREIGN KEY (id_order) REFERENCES "order"(id_order)
);

create table ticket (
	id_ticket SERIAL not null PRIMARY KEY,
	id_voucher int not null,
	id_naturalCustomer int not null,
	
	CONSTRAINT fk_voucher FOREIGN KEY (id_voucher) REFERENCES voucher(id_voucher),
	CONSTRAINT fk_naturalCustomer FOREIGN KEY (id_naturalCustomer) REFERENCES naturalCustomer(id_naturalCustomer)
	
);

create table bill (
	id_bill SERIAL not null PRIMARY KEY,
	id_voucher int not null,
	id_juridicalCustomer int not null,
	
	CONSTRAINT fk_voucher FOREIGN KEY (id_voucher) REFERENCES voucher(id_voucher),
	CONSTRAINT fk_juridicalCustomer FOREIGN KEY (id_juridicalCustomer) REFERENCES juridicalCustomer(id_juridicalCustomer)
	
);



-- procedimientos

create or replace procedure add_employee (
	dni int ,
	name varchar , 
last_paternal varchar,
last_maternal varchar,
 birthdate date,
address varchar,
phone_number int,
email varchar,
username varchar,
password varchar,
id_role int
)
language plpgsql as $$
declare 
_id_person int ;
_id_naturalPerson int;

begin
	insert into person(address,phone_number,email)
	values (address,phone_number,email)
	returning id_person into _id_person;
	
	insert into naturalPerson(dni,name,last_maternal,last_paternal,birthdate,id_person)
	values (dni,name,last_maternal,last_paternal,birthdate,_id_person)
	returning id_naturalPerson into _id_naturalPerson;

	insert into employee (username,password,id_naturalPerson,id_role)
	values (username,password,_id_naturalPerson,id_role);
end;
$$;

--Ejecutar el procedimiento
call add_employee (76454651,'leonardo','murillo','apellido','2006-01-19','Huaycan',936197832,'leo@xd','leo14','leonardo11',1);

insert into "role"(name_role) values 
('administrador'),('mesero'),('cocinero'),('cajero');

-- Obtener todos los datos del empleado
create or replace  view getEmployee as select p.id_person, np.id_naturalperson, e.id_employee, np.dni , np."name",np.last_paternal,np.last_maternal,np.birthdate,p.address,p.phone_number,p.email,e.username,r.name_role from employee e 
inner join naturalPerson np on e.id_naturalPerson=np.id_naturalPerson 
inner join person p on np.id_person=p.id_person
inner join "role" r on r.id_role= e.id_role ;
-- mostrar los datos 
select * from getEmployee