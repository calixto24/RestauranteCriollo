-- PRIMERA EJECUCION (TABLAS)
create table person (
	id_person SERIAL not null PRIMARY KEY,
	address varchar(100),
	phone_number int,
	email varchar(100) 
);

create table naturalPerson (
	id_naturalPerson SERIAL not null PRIMARY KEY,
	dni int,
	name varchar(100),
	last_paternal varchar(100),
	last_maternal varchar(100),
	birthdate Date,
	id_person int not null,

	CONSTRAINT fk_person_naturalPerson FOREIGN KEY (id_person) REFERENCES person(id_person) ON DELETE CASCADE
);

create table juridicalPerson (
	id_juridicalPerson SERIAL not null PRIMARY KEY,
	ruc varchar(11),
	socialReason varchar(100),
	type varchar(100),
	economicActivity varchar(100),
	typeBilling varchar(100),
	id_person int not null,

	CONSTRAINT fk_person FOREIGN KEY (id_person) REFERENCES person(id_person) ON DELETE CASCADE
);

create table juridicalCustomer(
	id_juridicalCustomer SERIAL not null PRIMARY KEY,
	register Date,
	id_juridicalPerson int not null,
	
	CONSTRAINT fk_juridicalPerson FOREIGN KEY (id_juridicalPerson) REFERENCES juridicalPerson(id_juridicalPerson) ON DELETE CASCADE
);

create table "role" (
	id_role SERIAL not null PRIMARY KEY,
	name_role varchar(100)
);

create table employee (
	id_employee SERIAL not null PRIMARY KEY,
	username varchar(100),
	password varchar(100),
	id_naturalPerson int not null,
	id_role int not null,

	CONSTRAINT fk_naturalPerson FOREIGN KEY (id_naturalPerson) REFERENCES naturalPerson(id_naturalPerson) ON DELETE CASCADE,
	CONSTRAINT fk_role FOREIGN KEY (id_role) REFERENCES role(id_role)
);

create table naturalCustomer (
	id_naturalCustomer SERIAL not null PRIMARY KEY,
	register Date,
	id_naturalPerson int not null,
	
	CONSTRAINT fk_naturalPerson FOREIGN KEY (id_naturalPerson) REFERENCES naturalPerson(id_naturalPerson) ON DELETE CASCADE
);

create table "table" (
	id_table SERIAL not null PRIMARY KEY,
	number_table int,
	capacity int,
	status varchar(100),
	id_employee int not null,

	CONSTRAINT fk_employee FOREIGN KEY (id_employee) REFERENCES employee(id_employee)
);

create table category (
	id_category SERIAL not null PRIMARY KEY,
	name_category varchar(100),
	description varchar (100)
);

create table itemMenu (
	id_itemMenu SERIAL not null PRIMARY KEY,
	name_itemMenu varchar(100),
	priceUnit decimal(10,2),
	description varchar(100),
	status varchar(100),
	image varchar(100),
	id_category int not null,

	CONSTRAINT fk_category FOREIGN KEY (id_category) REFERENCES category(id_category)	
);

create table itemOrder (
	id_itemOrder SERIAL not null PRIMARY KEY,
	amount int,
	total decimal(10,2),
	description varchar(100),
	id_itemMenu int not null,

	CONSTRAINT fk_itemMenu FOREIGN KEY (id_itemMenu) REFERENCES itemMenu(id_itemMenu)	
);

create table "order" (
	id_order SERIAL not null PRIMARY KEY,
	"date" Date,
	"time" Time,
	status varchar(100),
	totalPrice decimal(10,2),
	id_employee int not null,
	id_table int not null,
	id_itemOrder int not null,

	CONSTRAINT fk_employee FOREIGN KEY (id_employee) REFERENCES employee(id_employee),
	CONSTRAINT fk_itemOrder FOREIGN KEY (id_itemOrder) REFERENCES itemOrder(id_itemOrder),
	CONSTRAINT fk_table FOREIGN KEY (id_table) REFERENCES "table"(id_table)
);

create table voucher (
	id_voucher SERIAL not null PRIMARY KEY,
	"date" Date,
	"time" Time,
	status varchar(100),
	totalPrice decimal(10,2),
	discount decimal(10,2),
	additionalPayments decimal(10,2),
	igv decimal(10,2),
	paymentType varchar(100),
	turned decimal(10,2),
	id_employee int not null,
	id_order int not null,

	CONSTRAINT fk_employee FOREIGN KEY (id_employee) REFERENCES employee(id_employee),
	CONSTRAINT fk_order FOREIGN KEY (id_order) REFERENCES "order"(id_order)
);

create table ticket (
	id_ticket SERIAL not null PRIMARY KEY,
	id_voucher int not null,
	id_naturalCustomer int not null,
	
	CONSTRAINT fk_voucher FOREIGN KEY (id_voucher) REFERENCES voucher(id_voucher),
	CONSTRAINT fk_naturalCustomer FOREIGN KEY (id_naturalCustomer) REFERENCES naturalCustomer(id_naturalCustomer)
	
);

create table bill (
	id_bill SERIAL not null PRIMARY KEY,
	id_voucher int not null,
	id_juridicalCustomer int not null,
	
	CONSTRAINT fk_voucher FOREIGN KEY (id_voucher) REFERENCES voucher(id_voucher),
	CONSTRAINT fk_juridicalCustomer FOREIGN KEY (id_juridicalCustomer) REFERENCES juridicalCustomer(id_juridicalCustomer)
	
);

-- SEGUNDA EJECUCION (INSER)
insert into "role"(name_role) values 
('administrador'),
('mesero'),
('cocinero'),
('cajero');

-- PROCEDIMIENTO EMPLEADO
create or replace procedure add_employee (
	dni int ,
	name varchar , 
	last_paternal varchar,
	last_maternal varchar,
	birthdate date,
	address varchar,
	phone_number int,
	email varchar,
	username varchar,
	password varchar,
	id_role int
)
language plpgsql as $$
declare 
_id_person int ;
_id_naturalPerson int;

begin
	insert into person(address,phone_number,email)
	values (address,phone_number,email)
	returning id_person into _id_person;
	
	insert into naturalPerson(dni,name,last_maternal,last_paternal,birthdate,id_person)
	values (dni,name,last_maternal,last_paternal,birthdate,_id_person)
	returning id_naturalPerson into _id_naturalPerson;

	insert into employee (username,password,id_naturalPerson,id_role)
	values (username,password,_id_naturalPerson,id_role);
end;
$$;

create or replace procedure update_employee(
	dni_n int ,
	name_n varchar , 
	last_paternal_n varchar,
	last_maternal_n varchar,
	 birthdate_n date,
	address_n varchar,
	phone_number_n int,
	email_n varchar,
	username_n varchar,
	password_n varchar,
	id_role_n int,
	id_employee_n int,
	id_naturalPerson_n int,
	id_person_n int
)
language plpgsql as $$ 
begin 
	update person set 
	address= address_n,
	phone_number= phone_number_n,
	email=email_n 
	where id_person = id_person_n;

	update naturalPerson set
	dni= dni_n,
	name= name_n,
	last_paternal= last_paternal_n,
	last_maternal=last_maternal_n,
	birthdate= birthdate_n
    where id_naturalPerson= id_naturalPerson_n;

	update employee set
	username= username_n,
	password= password_n,
	id_role= id_role_n
	where id_employee= id_employee_n;

end;
$$;

-- EJECUCION DE LOS PROCEDIMIENTOS
call add_employee (76454651,'leonardo','murillo','apellido','2006-01-19','Huaycan',936197832,'leo@xd','leo14','leonardo11',1);
call update_employee(60749109,'Dalia','Alberto','Joaquin','2006-06-06','Huachipa',935041343,'dalia@gmail.com','Dalia','nolan',3,2,2,2);

-- CONSULTA EMPLEADO
create or replace  view getEmployee as select p.id_person, np.id_naturalperson, e.id_employee, np.dni , np."name",np.last_paternal,np.last_maternal,np.birthdate,p.address,p.phone_number,p.email,e.username,r.name_role 
from employee e 
inner join naturalPerson np on e.id_naturalPerson=np.id_naturalPerson 
inner join person p on np.id_person=p.id_person
inner join "role" r on r.id_role= e.id_role ;

-- mostrar los datos 
select * from getEmployee


-- PROCEDIMIENTO CLIENTE NATURAL
create or replace procedure add_naturalCustomer (
	dni int ,
	name varchar , 
	last_paternal varchar,
	last_maternal varchar,
	 birthdate Date,
	address varchar,
	phone_number int,
	email varchar,
	register Date 
)
language plpgsql as $$
declare 
_id_person int ;
_id_naturalPerson int ;

begin
	insert into person(address,phone_number,email)
	values (address,phone_number,email)
	returning id_person into _id_person;

	insert into naturalPerson(dni,name,last_paternal,last_maternal,birthdate,id_person)
	values(dni,name,last_paternal,last_maternal,birthdate,_id_person)
	returning id_naturalPerson into _id_naturalPerson;

	insert into naturalCustomer(register,id_naturalPerson)
	values (register,_id_naturalPerson);
end;
$$;


create or replace procedure update_naturalCustomer(
	dni_m int ,
    name_m varchar , 
	last_paternal_m varchar,
	last_maternal_m varchar,
	birthdate_m date,
	address_m varchar,
	phone_number_m int,
	email_m varchar,
	register_m date,
	id_person_m int,
	id_naturalPerson_m int,
	id_naturalCustomer_m int
) 
language plpgsql as $$ 
begin

    update person set
	address= address_m,
	phone_number= phone_number_m,
	email=email_m 
	where id_person = id_person_m;

	update naturalPerson set
	dni = dni_m,
	name= name_m,
	last_paternal=last_paternal_m,
	last_maternal=last_maternal_m, 
	birthdate= birthdate_m
    where id_naturalPerson= id_naturalPerson_m;

	update naturalCustomer set
	register= register_m
	where id_naturalCustomer= id_naturalCustomer_m;
	
end;
$$;

-- EJECUCION DE LOS PROCEDIMIENTOS
call add_naturalCustomer(76454551,'leonardo','murillo','apellido','2006-01-19','chosica',936197832,'leod@gmail.com','2022-10-20');
call update_naturalCustomer(76454551,'xd','murillo','apellido','2006-01-19','chosica',936197832,'leod@gmail.com','2022-10-20',5,3,2);

-- CONSULTA CLIENTE NATURAL
create or replace  view getNaturalCustomer as select p.id_person, np.id_naturalperson, nc.id_naturalcustomer, np.dni , np."name",np.last_paternal,np.last_maternal,np.birthdate,p.address,p.phone_number,p.email,nc.register
from naturalCustomer nc 
inner join naturalPerson np on nc.id_naturalperson = np.id_naturalperson
inner join person p on np.id_person = p.id_person

select * from getNaturalCustomer

-- PROCEDIMIENTO CLIENTE JURIDICO
create or replace procedure add_juridicalCustomer (
    ruc varchar, 
    socialReason varchar, 
    type varchar, 
    economicActivity varchar, 
    typeBilling varchar, 
    address varchar, 
    phone_number int, 
    email varchar,
    register Date
)
language plpgsql as $$
declare
    _id_person int;
    _id_juridicalPerson int;
begin
    insert into person (address, phone_number, email)
    values (address, phone_number, email)
    returning id_person into _id_person;

    insert into juridicalPerson (ruc, socialReason, type, economicActivity, typeBilling, id_person)
    values (ruc, socialReason, type, economicActivity, typeBilling, _id_person)
    returning id_juridicalPerson into _id_juridicalPerson;

	insert into juridicalCustomer(register, id_juridicalPerson)
	values (register, _id_juridicalPerson);
end;
$$;	

create or replace procedure update_juridicalCustomer (

	ruc_n varchar ,
	socialReason_n varchar,
	type_n varchar,
	economicActivity_n varchar ,
	typeBilling_n varchar,
	address_n varchar,
	phone_number_n int, 
	email_n varchar,
	register_n date,
	id_person_n int ,
	id_juridicalPerson_n int ,
	id_juridicalCustomer_n int 
)

language plpgsql as $$ 
begin
	update person set 
	address = address_n,
	phone_number=phone_number_n,
	email=email_n
	where id_person = id_person_n ;
	
	update juridicalPerson set
	ruc=ruc_n,
	socialReason=socialReason_n,
	type=type_n,
	economicActivity=economicActivity_n,
	typeBilling=typeBilling_n
	where id_juridicalPerson= id_juridicalPerson_n;
	
	update juridicalCustomer set 
	register = register_n
	where id_juridicalCustomer=id_juridicalCustomer_n;
end;
$$;

--EJECUCION DE LOS PROCEDIMIENTOS
call add_juridicalCustomer('12345678912', 'a','a','a','l','l',935041343,'nol','1997-09-01')
call update_juridicalCustomer('12345678912', 'cccc','a','a','l','l',935041343,'nol','1997-09-01',6,1,1)

--CONSULTAS CLIENTE JURIDICO
create or replace view getJuricalCustomer as select p.id_person,jp.id_juridicalperson,jc.id_juridicalcustomer ,jp.ruc,jp.socialreason,jp."type",jp.economicactivity,jp.typebilling,p.address,p.email,p.phone_number,jc.register
from juridicalCustomer jc 
inner join juridicalPerson jp on jc.id_juridicalperson = jp.id_juridicalperson
inner join person p on p.id_person = jp.id_person

select * from getJuricalCustomer